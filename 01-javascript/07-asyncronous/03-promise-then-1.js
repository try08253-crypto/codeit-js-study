// Promise의 then 메소드
// 1. then 메소드가 실행되면, then 메소드의 매개변수로 주입되는 콜백 함수를 콜백 큐에 등록합니다.
//   - 프로미스 컨테이너 내부의 값이 결정이 되어 있다면 => 즉시 JS 엔진에 의해서 콜백 큐에 콜백 함수가 등록됩니다.
//   - 프로미스 컨테이너 내부의 값이 결정이 안되어 있다면, 결정되기를 기다렸다가 => JS 엔진에 의해서 콜백 큐에 콜백 함수가 등록됩니다.
// 2. 이벤트 루프에 의해서 콜백 큐에 등록된 콜백 함수가 콜 스택에서 실행됩니다.
// 3. 실행되는 콜백 함수를 통해서 프로미스 컨테이너 내부의 값에 접근할 수 있습니다.

// 프로미스는 미래에 결정될 예정인 값을 담은 컨테이너입니다.
// 대기중, 완료, 에러 3가지 상태를 가질 수 있습니다.
// 프로미스 컨테이너 내부의 값을 지금 즉시 1로 결정해봅시다.
// 내부의 값 1에 2를 곱해서 출력해봅시다.
const p1 = new Promise((resolve, reject) => { resolve(1) });
console.log(p1);
p1.then((v) => console.log(v * 2));

// 프로미스는 미래에 결정될 예정인 값을 담은 컨테이너입니다.
// 대기중, 완료, 에러 3가지 상태를 가질 수 있습니다.
// 프로미스 컨테이너 내부의 값을 1초 뒤에 10으로 결정해봅시다.
// 내부의 값 10에 2를 곱해서 출력해봅시다.
const p2 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve(10);
  }, 1000);
});
console.log(p2);
p2.then((v) => console.log(v * 2));